#!/usr/bin/env python3
# -*- coding: utf-8 -*-
print(10 // 3)
print(10 % 3)
print(10 / 3)

a = ord('A')
b = ord('中')
print(a)
print(b)
print(chr(a))
print(chr(b))

r = (85-72)/72*100
print('%.1f ' % r)
=======
'''
数据类型和变量
'''
'''
整数

Python可以处理任意大小的整数，当然包括负整数，
在程序中的表示方法和数学上的写法一模一样，
例如：1，100，-8080，0，等等。

计算机由于使用二进制，
所以，有时候用十六进制表示整数比较方便，
十六进制用0x前缀和0-9，a-f表示，
例如：0xff00，0xa5b4c3d2，等等。
'''
'''
浮点数

浮点数也就是小数，
之所以称为浮点数，是因为按照科学记数法表示时，
一个浮点数的小数点位置是可变的，
比如，1.23x109和12.3x108是完全相等的。
浮点数可以用数学写法，
如1.23，3.14，-9.01，等等。
但是对于很大或很小的浮点数，就必须用科学计数法表示，
把10用e替代，1.23x109就是1.23e9，
或者12.3e8，0.000012可以写成1.2e-5，等等。

整数和浮点数在计算机内部存储的方式是不同的，
整数运算永远是精确的（除法难道也是精确的？是的！），
而浮点数运算则可能会有四舍五入的误差。
'''
'''
字符串

字符串是以单引号'或双引号"括起来的任意文本，
比如'abc'，"xyz"等等。
请注意，''或""本身只是一种表示方式，不是字符串的一部分，
因此，字符串'abc'只有a，b，c这3个字符。
如果'本身也是一个字符，那就可以用""括起来，
比如"I'm OK"包含的字符是I，'，m，空格，O，K这6个字符。

如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，比如：
'I\'m \"OK\"!'
表示的字符串内容是：
I'm "OK"!
转义字符\可以转义很多字符，
比如\n表示换行，\t表示制表符，
字符\本身也要转义，所以\\表示的字符就是\，
可以在Python的交互式命令行用print()打印字符串看看：
'''
print('I\'m ok.')
print('I\'m learning\nPython.')
print('\\\n\\')
'''
如果字符串里面有很多字符都需要转义，就需要加很多\，
为了简化，Python还允许用r''表示''内部的字符串默认不转义，可以自己试试：
'''
print('\\\t\\')
print(r'\\\t\\')

'''
如果字符串内部有很多换行，用\n写在一行里不好阅读，
为了简化，Python允许用''''''的格式表示多行内容，可以自己试试：
line1
line2
line3
上面是在交互式命令行内输入，注意在输入多行内容时，
提示符由>>>变为...，
提示你可以接着上一行输入。如果写成程序，就是：
'''
print('''line1
line2
line3''')
'''
多行字符串''''''还可以在前面加上r使用。
'''

'''
布尔值

布尔值和布尔代数的表示完全一致，
一个布尔值只有True、False两种值，
要么是True，要么是False，
在Python中，可以直接用True、False表示布尔值（请注意大小写）
，也可以通过布尔运算计算出来：
'''
True
True
False
False
3 > 2
True
3 > 5
False
'''
布尔值可以用and、or和not运算。

and运算是与运算，只有所有都为True，and运算结果才是True：
'''
True and True
True
True and False
False
False and False
False
5 > 3 and 3 > 1
True
'''
or运算是或运算，只要其中有一个为True，or运算结果就是True：
'''
True or True
True
True or False
True
False or False
False
5 > 3 or 1 > 3
True
'''
not运算是非运算，它是一个单目运算符，把True变成False，False变成True：
'''
not True
False
not False
True
not 1 > 2
True
'''
布尔值经
常用在条件判断中，比如：
'''
age = 25
if age >= 18:
    print('adult')
else:
    print('teenager')
'''
'''
>>>>>>> d2d1f169f90e6868a90c23f3c2ba075bf0a34cbb
